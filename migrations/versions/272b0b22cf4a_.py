"""empty message

Revision ID: 272b0b22cf4a
Revises: 0763d677d453
Create Date: 2025-07-08 16:31:03.721720

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '272b0b22cf4a'
down_revision = '0763d677d453'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('second_name', sa.String(length=100), nullable=True),
    sa.Column('first_surname', sa.String(length=100), nullable=False),
    sa.Column('second_surname', sa.String(length=100), nullable=True),
    sa.Column('birth_day', sa.Date(), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=30), nullable=False),
    sa.Column('password', sa.String(length=200), nullable=False),
    sa.Column('role', sa.Enum('admin', 'professional', 'student', 'patient', name='userrole'), nullable=False),
    sa.Column('status', sa.Enum('pre_approved', 'approved', 'inactive', name='userstatus'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('medical_file',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('file_status', sa.Enum('empty', 'progress', 'review', 'approved', 'confirmed', name='filestatus'), nullable=False),
    sa.Column('selected_student_id', sa.Integer(), nullable=True),
    sa.Column('patient_requested_student_id', sa.Integer(), nullable=True),
    sa.Column('patient_requested_student_at', sa.DateTime(), nullable=True),
    sa.Column('student_validated_patient_id', sa.Integer(), nullable=True),
    sa.Column('student_validated_patient_at', sa.DateTime(), nullable=True),
    sa.Column('student_rejected_patient_id', sa.Integer(), nullable=True),
    sa.Column('student_rejected_patient_at', sa.DateTime(), nullable=True),
    sa.Column('progressed_by_id', sa.Integer(), nullable=True),
    sa.Column('progressed_at', sa.DateTime(), nullable=True),
    sa.Column('reviewed_by_id', sa.Integer(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(), nullable=True),
    sa.Column('approved_by_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('no_approved_by_id', sa.Integer(), nullable=True),
    sa.Column('no_approved_at', sa.DateTime(), nullable=True),
    sa.Column('confirmed_by_id', sa.Integer(), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.Column('no_confirmed_by_id', sa.Integer(), nullable=True),
    sa.Column('no_confirmed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['confirmed_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['no_approved_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['no_confirmed_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['patient_requested_student_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['progressed_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['reviewed_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['selected_student_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['student_rejected_patient_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['student_validated_patient_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('professional_student_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('institution', sa.String(length=100), nullable=False),
    sa.Column('career', sa.String(length=100), nullable=False),
    sa.Column('academic_grade', sa.Enum('no_formal_education', 'elementary_school', 'middle_school', 'high_school', 'technical', 'bachelor', 'postgraduate_studies', name='academicgrade'), nullable=False),
    sa.Column('register_number', sa.String(length=30), nullable=False),
    sa.Column('validated_by_id', sa.Integer(), nullable=True),
    sa.Column('validated_at', sa.DateTime(), nullable=True),
    sa.Column('requested_professional_id', sa.Integer(), nullable=True),
    sa.Column('requested_at', sa.DateTime(), nullable=True),
    sa.Column('approved_by_professional_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('rejected_by_professional_id', sa.Integer(), nullable=True),
    sa.Column('rejected_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by_professional_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['rejected_by_professional_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['requested_professional_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['validated_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('family_background',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('medical_file_id', sa.Integer(), nullable=False),
    sa.Column('hypertension', sa.Boolean(), nullable=True),
    sa.Column('diabetes', sa.Boolean(), nullable=True),
    sa.Column('cancer', sa.Boolean(), nullable=True),
    sa.Column('mental_illnesses', sa.Boolean(), nullable=True),
    sa.Column('congenital_diseases', sa.Boolean(), nullable=True),
    sa.Column('heart_diseases', sa.Boolean(), nullable=True),
    sa.Column('liver_diseases', sa.Boolean(), nullable=True),
    sa.Column('kidney_diseases', sa.Boolean(), nullable=True),
    sa.Column('other_family_background_info', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['medical_file_id'], ['medical_file.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('gynecological_background',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('medical_file_id', sa.Integer(), nullable=False),
    sa.Column('menarche_age', sa.Integer(), nullable=True),
    sa.Column('pregnancies', sa.Integer(), nullable=True),
    sa.Column('births', sa.Integer(), nullable=True),
    sa.Column('c_sections', sa.Integer(), nullable=True),
    sa.Column('abortions', sa.Integer(), nullable=True),
    sa.Column('contraceptive_methods', sa.String(length=255), nullable=True),
    sa.Column('other_gynecological_info', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['medical_file_id'], ['medical_file.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('medical_file_snapshot',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('medical_file_id', sa.Integer(), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('uploaded_by_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['medical_file_id'], ['medical_file.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uploaded_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('non_pathological_background',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('medical_file_id', sa.Integer(), nullable=False),
    sa.Column('sex', sa.String(length=20), nullable=True),
    sa.Column('nationality', sa.String(length=80), nullable=True),
    sa.Column('ethnic_group', sa.String(length=80), nullable=True),
    sa.Column('languages', sa.String(length=255), nullable=True),
    sa.Column('blood_type', sa.String(length=5), nullable=True),
    sa.Column('spiritual_practices', sa.Text(), nullable=True),
    sa.Column('other_origin_info', sa.Text(), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('housing_type', sa.Enum('owned', 'rented', 'none', name='housingtype'), nullable=True),
    sa.Column('civil_status', sa.Enum('married', 'single', 'divorced', 'widowed', name='civilstatus'), nullable=True),
    sa.Column('cohabitants', sa.String(length=255), nullable=True),
    sa.Column('dependents', sa.String(length=255), nullable=True),
    sa.Column('other_living_info', sa.Text(), nullable=True),
    sa.Column('education_institution', sa.String(length=255), nullable=True),
    sa.Column('academic_degree', sa.String(length=100), nullable=True),
    sa.Column('career', sa.String(length=100), nullable=True),
    sa.Column('institute_registration_number', sa.String(length=50), nullable=True),
    sa.Column('other_education_info', sa.Text(), nullable=True),
    sa.Column('economic_activity', sa.String(length=100), nullable=True),
    sa.Column('is_employer', sa.Boolean(), nullable=True),
    sa.Column('other_occupation_info', sa.Text(), nullable=True),
    sa.Column('has_medical_insurance', sa.Enum('yes', 'no', name='yesno'), nullable=True),
    sa.Column('insurance_institution', sa.String(length=100), nullable=True),
    sa.Column('insurance_number', sa.String(length=50), nullable=True),
    sa.Column('other_insurance_info', sa.Text(), nullable=True),
    sa.Column('diet_quality', sa.Enum('good', 'regular', 'bad', name='qualitylevel'), nullable=True),
    sa.Column('meals_per_day', sa.Integer(), nullable=True),
    sa.Column('daily_liquid_intake_liters', sa.Float(), nullable=True),
    sa.Column('supplements', sa.Text(), nullable=True),
    sa.Column('other_diet_info', sa.Text(), nullable=True),
    sa.Column('hygiene_quality', sa.Enum('good', 'regular', 'bad', name='qualitylevel'), nullable=True),
    sa.Column('other_hygiene_info', sa.Text(), nullable=True),
    sa.Column('exercise_quality', sa.Enum('good', 'regular', 'bad', name='qualitylevel'), nullable=True),
    sa.Column('exercise_details', sa.Text(), nullable=True),
    sa.Column('sleep_quality', sa.Enum('good', 'regular', 'bad', name='qualitylevel'), nullable=True),
    sa.Column('sleep_details', sa.Text(), nullable=True),
    sa.Column('hobbies', sa.Text(), nullable=True),
    sa.Column('recent_travel', sa.Text(), nullable=True),
    sa.Column('has_piercings', sa.Enum('yes', 'no', name='yesno'), nullable=True),
    sa.Column('has_tattoos', sa.Enum('yes', 'no', name='yesno'), nullable=True),
    sa.Column('alcohol_use', sa.Text(), nullable=True),
    sa.Column('tobacco_use', sa.Text(), nullable=True),
    sa.Column('other_drug_use', sa.Text(), nullable=True),
    sa.Column('addictions', sa.Text(), nullable=True),
    sa.Column('other_recreational_info', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['medical_file_id'], ['medical_file.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pathological_background',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('medical_file_id', sa.Integer(), nullable=False),
    sa.Column('disability_description', sa.Text(), nullable=True),
    sa.Column('visual_disability', sa.Boolean(), nullable=True),
    sa.Column('hearing_disability', sa.Boolean(), nullable=True),
    sa.Column('motor_disability', sa.Boolean(), nullable=True),
    sa.Column('intellectual_disability', sa.Boolean(), nullable=True),
    sa.Column('chronic_diseases', sa.Text(), nullable=True),
    sa.Column('current_medications', sa.Text(), nullable=True),
    sa.Column('hospitalizations', sa.Text(), nullable=True),
    sa.Column('surgeries', sa.Text(), nullable=True),
    sa.Column('accidents', sa.Text(), nullable=True),
    sa.Column('transfusions', sa.Text(), nullable=True),
    sa.Column('allergies', sa.Text(), nullable=True),
    sa.Column('other_pathological_info', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['medical_file_id'], ['medical_file.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('user')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key')
    )
    op.drop_table('pathological_background')
    op.drop_table('non_pathological_background')
    op.drop_table('medical_file_snapshot')
    op.drop_table('gynecological_background')
    op.drop_table('family_background')
    op.drop_table('professional_student_data')
    op.drop_table('medical_file')
    op.drop_table('users')
    # ### end Alembic commands ###
